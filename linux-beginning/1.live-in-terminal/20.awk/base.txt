
Введение в команду awk
awk — это мощный инструмент для обработки текстовых данных в Linux. Он используется для сканирования файлов или вывода команд, фильтрации, изменения и генерации текста на основе определённых критериев. awk может работать с текстом, разделённым пробелами, запятыми или другими разделителями, и обладает собственным языком программирования для создания сложных скриптов обработки данных.

Основные возможности awk
Фильтрация строк: awk может фильтровать строки текста на основе условий.
Извлечение колонок: awk легко извлекает и обрабатывает данные из колонок, определённых разделителями.
Манипуляция данными: можно изменять, форматировать или обрабатывать данные прямо в потоке.
Подсчёт данных: awk может суммировать, считать и выполнять математические операции с числами в колонках.
Основной синтаксис
awk 'pattern {action}' filename
pattern — условие, которое проверяется для каждой строки (например, только строки, содержащие определённое слово).
action — действие, выполняемое для каждой строки, которая соответствует pattern (например, печать строки, подсчёт данных).
Пример:
awk '{print $1}' file.txt
Этот пример выведет первый столбец из файла file.txt.

Разделение полей
awk по умолчанию считает, что поля в строке разделены пробелами. Но с помощью опции -F можно указать любой другой разделитель, например, запятую или табуляцию:

awk -F, '{print $1}' file.csv
Здесь -F, указывает на использование запятой в качестве разделителя полей.

Поля в awk
awk использует номерные переменные для работы с полями в строке:

$1 — первое поле.
$2 — второе поле.
$0 — вся строка целиком.
Примеры использования
1. Извлечение полей
Извлечение первого поля:
awk '{print $1}' file1.txt
Выводит только имена из файла.
2. Фильтрация строк по условию
Вывести строки, где третье поле больше 30:
awk '$3 > 30' file1.txt
3. Работа с разделителями
Использование запятой как разделителя:
awk -F, '{print $1, $3}' file1.txt
Выведет имена и возраст из файла, где данные разделены запятой.
4. Условия if
Применение условного оператора:
awk '{if ($3 > 30) print $1, $2}' file1.txt
Этот пример выводит имена тех, кто старше 30 лет.
5. Подсчёт строк и суммирование
Подсчёт общего количества строк:

awk 'END {print NR}' file1.txt
Суммирование значений в столбце:

awk '{sum += $3} END {print sum}' file1.txt
Этот пример посчитает общую сумму значений третьего столбца (например, возраст).